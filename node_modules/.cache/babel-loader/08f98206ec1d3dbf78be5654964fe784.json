{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport Web3 from 'web3';\nexport const web3init = createAsyncThunk(\"web3init\", async (data, thunkAPI) => {\n  try {\n    if (Web3.givenProvider) {\n      const web3 = new Web3(Web3.givenProvider);\n      await Web3.givenProvider.enable();\n      const address = await web3.eth.getAccounts();\n      console.log(address);\n      return {\n        web3,\n        address: address[0]\n      };\n    }\n  } catch (error) {}\n});\nexport const web3Reload = createAsyncThunk(\"web3Reload\", async (data, thunkAPI) => {\n  try {\n    if (Web3.givenProvider) {\n      const web3 = new Web3(Web3.givenProvider);\n      const address = await web3.eth.getAccounts();\n      console.log(address);\n      return {\n        web3,\n        address: address[0]\n      };\n    }\n  } catch (error) {}\n});\nconst connectSlice = createSlice({\n  name: 'connectSlice',\n  initialState: {\n    web3: null,\n    address: null,\n    name: 'ali',\n    msg: null\n  },\n  reducers: {},\n  extraReducers: {\n    [web3init.fulfilled]: (state, action) => {\n      state.web3 = action.payload.web3;\n      state.address = action.payload.address;\n      state.msg = error;\n    },\n    [web3Reload.fulfilled]: (state, action) => {\n      state.web3 = action.payload.web3;\n      state.address = action.payload.address;\n    },\n    [web3Reload.rejected]: (state, action) => {\n      state.web3 = null;\n      state.address = null;\n      state.msg = \"user denied\";\n    },\n    [web3init.rejected]: (state, action) => {\n      console.log(\"asd\");\n      state.web3 = null;\n      state.address = null;\n      state.msg = \"user denied\";\n    }\n  }\n});\nexport const connectReducer = connectSlice.reducer;","map":{"version":3,"sources":["/home/mutahir/Downloads/BlockChain/truffleBase/truffle/client/src/store/connectSlice.js"],"names":["createSlice","createAsyncThunk","Web3","web3init","data","thunkAPI","givenProvider","web3","enable","address","eth","getAccounts","console","log","error","web3Reload","connectSlice","name","initialState","msg","reducers","extraReducers","fulfilled","state","action","payload","rejected","connectReducer","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport Web3 from 'web3'\n\n\nexport const web3init = createAsyncThunk(\n    \"web3init\",\n    async (data, thunkAPI) => {\n        try {\n            if (Web3.givenProvider) {\n                const web3 = new Web3(Web3.givenProvider)\n                await Web3.givenProvider.enable()\n                const address = await web3.eth.getAccounts()\n\n                console.log(address)\n                return {\n                    web3, address: address[0]\n                }\n            }\n        } catch (error) {\n\n        }\n    }\n)\n\n\nexport const web3Reload = createAsyncThunk(\n    \"web3Reload\",\n    async (data, thunkAPI) => {\n        try {\n            if (Web3.givenProvider) {\n                const web3 = new Web3(Web3.givenProvider)\n\n                const address = await web3.eth.getAccounts()\n\n                console.log(address)\n                return {\n                    web3, address: address[0]\n                }\n            }\n        } catch (error) {\n\n        }\n    }\n)\n\n\n\nconst connectSlice = createSlice(\n    {\n        name: 'connectSlice',\n        initialState: {\n            web3: null,\n            address: null,\n            name: 'ali',\n            msg: null\n        },\n        reducers: {\n\n        }, extraReducers: {\n            [web3init.fulfilled]: (state, action) => {\n               \n                    state.web3 = action.payload.web3\n                    state.address = action.payload.address\n                   state.msg = error\n                \n\n            },\n            [web3Reload.fulfilled]: (state, action) => {\n               \n                    state.web3 = action.payload.web3\n                    state.address = action.payload.address\n               \n            }\n            ,\n            [web3Reload.rejected]: (state, action) => {\n                state.web3 = null\n                state.address = null\n                state.msg = \"user denied\"\n            }\n            ,\n            [web3init.rejected]: (state, action) => {\n                console.log(\"asd\")\n                state.web3 = null\n                state.address = null\n                state.msg = \"user denied\"\n            }\n        }\n    }\n)\n\nexport const connectReducer = connectSlice.reducer"]},"metadata":{},"sourceType":"module"}